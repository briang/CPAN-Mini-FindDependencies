#!/usr/local/bin/perl

use 5.010;

use strict;
use warnings FATAL => 'all';
#use diagnostics;

use Data::Dump;
#use Carp qw();

$|=1;
################################################################################
use MooseX::Declare;

class CPAN::Mini::FindDependencies {
    use autodie;
    use Archive::Tar;
    use CPAN::Meta;
    use Parse::CPAN::Packages::Fast;

    has qw(cpan_mini           is ro isa Str required 1);
    has qw(authors_path_prefix is ro isa Str);
    has qw(packages_details    is ro isa Str);
    has qw(prefer_yaml         is ro isa Bool default 0);

    sub BUILDARGS {
        my ($class, %args) = @_;

        my $cpan = $args{cpan_mini} || '';

        $args{authors_path_prefix} ||=
          join "/", $cpan, qw(authors id); # XXX
        $args{packages_details} ||=
          join "/", $cpan, qw(modules 02packages.details.txt.gz); # XXX

        return \%args;
    }

    method prefer_json() { ! $self->prefer_yaml }

    method get_meta_name($tar) {
        my ($json, $yaml);
        for ($tar->list_files) {
            $json = $_ if m{^[^/]*/META\.json$};
            $yaml = $_ if m{^[^/]*/META\.yml$};
            return $yaml if $yaml && $self->prefer_yaml;
            return $json if $json && $self->prefer_json;
        }

        return $json || $yaml;
    }

    method get_content($tar, Str $filename) {
        my $meta_file  = $tar->get_content($filename);
        return unless $meta_file;

        my $is_json = $meta_file =~ /\.json/i;
        my $method  = join '_', 'load', ($is_json ? 'json' : 'yaml'), 'string';

        return eval { CPAN::Meta->$method($meta_file) };
    }

    method get_prereqs(Str $path_suffix) {
        state $tar = Archive::Tar->new; # XXX make attribute

        $Archive::Tar::error = '';
        $tar->read(join "/", $self->authors_path_prefix, $path_suffix); # XXX
        # $bad_archive++, next unless $tar->error; # XXX what to do if error?

        my $meta_file = $self->get_meta_name($tar);
        my $meta      = $self->get_content($tar, $meta_file);

        return $meta->effective_prereqs->as_string_hash;
    }

    method get_distpath_containing(Str $package_name) {
        state $parser = Parse::CPAN::Packages::Fast->new($self->packages_details); # XXX make attribute

        my $mod  = $parser->package($package_name);
        my $dist = $mod->distribution;
        my $path = $dist->pathname;

        return $path;
    }
};
################################################################################
my $dep_finder = CPAN::Mini::FindDependencies->new(
    cpan_mini => "/mirrors/cpan",
);

my $path_suffix = $dep_finder->get_distpath_containing("CPAN::FindDependencies");
my $prereqs     = $dep_finder->get_prereqs($path_suffix);

dd $prereqs;

# SPEC 1.4 (YAML)
#
# requires ALWAYS
#     A YAML mapping indicating the Perl prerequisites this
#     distribution requires for proper operation. The keys are the
#     names of the prerequisites (module names or 'perl'), and the
#     values are version specifications as described in VERSION
#     SPECIFICATIONS.
# recommends OPTION
#     A YAML mapping indicating the Perl prerequisites this
#     distribution recommends for enhanced operation. The keys are the
#     names of the prerequisites (module names or 'perl'), and the
#     values are version specifications as described in VERSION
#     SPECIFICATIONS.
# build_requires ALWAYS
#     A YAML mapping indicating the Perl prerequisites required for
#     building and/or testing of this distribution. The keys are the
#     names of the prerequisites (module names or 'perl'), and the
#     values are version specifications as described in VERSION
#     SPECIFICATIONS. These dependencies are not required after the
#     distribution is installed.
# configure_requires ALWAYS
#     A YAML mapping indicating the Perl prerequisites required before
#     configuring this distribution. The keys are the names of the
#     prerequisites (module names or 'perl'), and the values are
#     version specifications as described in VERSION
#     SPECIFICATIONS. These dependencies are not required after the
#     distribution is installed.

# SPEC 2.110930 (YAML or JSON)
#
# prereqs => {
#   phase => {
#     relationship => {
#       'File::Spec'    => '0.86',
#       'Archive::Tar'  => '0',
#
# Phases (configure | build | test | runtime | develop)
#     Requirements for regular use must be listed in the runtime
#     phase. Other requirements should be listed in the earliest stage
#     in which they are required and consumers must accumulate and
#     satisfy requirements across phases before executing the
#     activity. For example, build requirements must also be available
#     during the test phase.
#
#     configure
#         The configure phase occurs before any dynamic configuration
#         has been attempted. Libraries required by the configure
#         phase must be available for use before the distribution
#         building tool has been executed.
#     build
#         The build phase is when the distribution's source code is
#         compiled (if necessary) and otherwise made ready for
#         installation.
#     test
#         The test phase is when the distribution's automated test
#         suite is run. Any library that is needed only for testing
#         and not for subsequent use should be listed here.
#     runtime
#         The runtime phase refers not only to when the distribution's
#         contents are installed, but also to its continued use. Any
#         library that is a prerequisite for regular use of this
#         distribution should be indicated here.
#     develop
#         The develop phase's prereqs are libraries needed to work on
#         the distribution's source code as its author does. These
#         tools might be needed to build a release tarball, to run
#         author-only tests, or to perform other tasks related to
#         developing new versions of the distribution.
# Relationships (requires | recommends | suggests | conflicts)
#     requires
#         These dependencies must be installed for proper completion
#         of the phase.
#     recommends
#         Recommended dependencies are strongly encouraged and should
#         be satisfied except in resource constrained environments.
#     suggests
#         These dependencies are optional, but are suggested for
#         enhanced operation of the described distribution.
#     conflicts
#         These libraries cannot be installed when the phase is in
#         operation. This is a very rare situation, and the conflicts
#         relationship should be used with great caution, or not at
#         all.
